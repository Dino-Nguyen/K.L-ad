{"version":3,"sources":["app/views/ui-kits/progressbar/AppProgressbar.jsx","../node_modules/react-bootstrap/esm/ElementChildren.js","../node_modules/react-bootstrap/esm/ProgressBar.js"],"names":["AppProgressbar","state","variantList","routeSegments","name","path","className","title","map","value","key","now","label","i","variant","striped","animated","Component","children","func","index","React","child","forEach","getPercentage","min","max","percentage","Math","round","renderProgressBar","ref","visuallyHidden","style","bsPrefix","props","_jsx","role","classNames","width","ProgressBar","isChild","useBootstrapPrefix","wrapperProps","cloneElement","displayName","defaultProps"],"mappings":"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","file":"static/js/82.3b355bdb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport SimpleCard from \"@gull/components/cards/SimpleCard\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nclass AppProgressbar extends Component {\n  state = {};\n  variantList = [\"primary\", \"success\", \"info\", \"warning\", \"danger\"];\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"UI Kits\", path: \"/uikits\" },\n            { name: \"Progress Bar\" }\n          ]}\n        ></Breadcrumb>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Basic Progress Bar\">\n              {[25, 50, 75, 100].map(value => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Basic Progress Bar With Label\">\n              {[25, 50, 75, 100].map(value => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  label={`${value}%`}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Basic Progress Bar With diff. Background\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Labeled Progress Bar With diff. background\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  label={`${value}%`}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-6 mb-4\">\n            <SimpleCard title=\"Progress Bar With Multiple bars\">\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"\" now={10} key={1} />\n                <ProgressBar variant=\"success\" now={25} key={2} />\n                <ProgressBar variant=\"info\" now={50} key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={1} />\n                <ProgressBar variant=\"\" now={35} label=\"35%\" key={2} />\n                <ProgressBar variant=\"danger\" now={40} label=\"40%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"success\" now={15} label=\"15%\" key={1} />\n                <ProgressBar variant=\"info\" now={25} label=\"25%\" key={2} />\n                <ProgressBar variant=\"warning\" now={30} label=\"30%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar variant=\"warning\" now={20} label=\"20%\" key={1} />\n                <ProgressBar variant=\"\" now={20} label=\"20%\" key={2} />\n                <ProgressBar variant=\"danger\" now={50} label=\"50%\" key={3} />\n              </ProgressBar>\n              <ProgressBar className=\"mb-3\">\n                <ProgressBar\n                  striped\n                  variant=\"success\"\n                  now={15}\n                  label=\"15%\"\n                  key={1}\n                />\n                <ProgressBar\n                  striped\n                  variant=\"info\"\n                  now={25}\n                  label=\"25%\"\n                  key={2}\n                />\n                <ProgressBar\n                  striped\n                  variant=\"warning\"\n                  now={30}\n                  label=\"30%\"\n                  key={3}\n                />\n              </ProgressBar>\n            </SimpleCard>\n          </div>\n\n          <div className=\"col-md-6\">\n            <SimpleCard title=\"Striped Progress Bar\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  striped\n                  label={`${value}%`}\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n\n        <div className=\"row mb-4\">\n          <div className=\"col-md-12 mb-4\">\n            <SimpleCard title=\"Animated stripes Progress Bar\">\n              {[10, 25, 50, 75, 100].map((value, i) => (\n                <ProgressBar\n                  key={value}\n                  now={value}\n                  animated\n                  striped\n                  variant={this.variantList[i]}\n                  className=\"mb-3\"\n                ></ProgressBar>\n              ))}\n            </SimpleCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppProgressbar;\n","import * as React from 'react';\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\n\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\n\n\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\nexport { map, forEach };","import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;"],"sourceRoot":""}